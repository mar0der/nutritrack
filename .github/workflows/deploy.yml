name: Deploy NutriTrack to Ubuntu Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Create SSH key file
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      env:
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID_PROD }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET_PROD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          "DOMAIN_NAME='$DOMAIN_NAME' DB_PASSWORD='$DB_PASSWORD' GOOGLE_CLIENT_ID='$GOOGLE_CLIENT_ID' GOOGLE_CLIENT_SECRET='$GOOGLE_CLIENT_SECRET' JWT_SECRET='$JWT_SECRET'" \
          bash << 'EOF'
        
        # Delete existing nutritrack folder if it exists
        echo "Cleaning up existing nutritrack folder..."
        sudo rm -rf /var/www/nutritrack
        
        # Create app directory
        sudo mkdir -p /var/www/nutritrack
        sudo chown $USER:$USER /var/www/nutritrack
        
        # Navigate to app directory
        cd /var/www/nutritrack
        
        # Clone repository
        echo "Cloning repository..."
        git clone https://github.com/mar0der/nutritrack.git .
        
        # Navigate to deployment directory
        cd deployment
        
        # Create .env file with GitHub secrets
        echo "Creating .env file with GitHub secrets..."
        {
          echo "DOMAIN_NAME=$DOMAIN_NAME"
          echo "DB_PASSWORD=$DB_PASSWORD"
          echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID"
          echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET"
          echo "JWT_SECRET=$JWT_SECRET"
          echo "VITE_API_URL=/api"
        } > .env
        
        # Debug: Show .env file creation
        echo "DEBUG: .env file created:"
        cat .env
        
        # Make scripts executable
        chmod +x *.sh || true
        
        # Generate SSL certificates (Let's Encrypt or self-signed fallback)
        echo "üîí Setting up SSL certificates..."
        if [ -n "$DOMAIN_NAME" ]; then
          echo "üåê Using Let's Encrypt for domain: $DOMAIN_NAME"
          
          # Check if Let's Encrypt certificates already exist
          if [ -f "letsencrypt/live/$DOMAIN_NAME/fullchain.pem" ]; then
            echo "‚úÖ Let's Encrypt certificates found, using existing certificates"
          else
            echo "üîß Generating new Let's Encrypt certificates..."
            # Run Docker-based Let's Encrypt setup
            ./docker-letsencrypt-setup.sh $DOMAIN_NAME admin@$DOMAIN_NAME
          fi
          
          # Use production docker-compose configuration
          echo "üìã Using production Docker Compose configuration"
          cp docker-compose-prod.yml docker-compose.yml
          ./generate-nginx-config.sh
        else
          echo "üîí Using self-signed certificates (no domain configured)"
          ./generate-ssl.sh
          cp docker-compose-prod.yml docker-compose.yml
        fi
        
        # Stop existing containers
        echo "Stopping existing containers..."
        docker compose down || true
        
        # Build and start services
        echo "Building and starting Docker services..."
        docker compose up -d --build
        
        echo "Deployment completed successfully!"
        
        EOF
        
    - name: Cleanup
      run: |
        rm -f ~/.ssh/id_rsa